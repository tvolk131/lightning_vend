syntax = "proto3";

package lightning_vend;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/type/money.proto";
import "lnd/lnrpc/lightning.proto";

// A user of the Lightning Vend service.
// This is a top-level resource that is not owned by any other resource.
message User {
  // The resource name of the user.
  // Format: users/{user}.
  string name = 1;

  // When the user was created.
  google.protobuf.Timestamp create_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // When the user was last updated.
  google.protobuf.Timestamp update_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  message AuthId {
    oneof id_type {
      // The user's Lightning Node public key.
      string lightning_node_pubkey = 1;
    }
  }

  // The user's authentication ID.
  AuthId auth_id = 4 [(google.api.field_behavior) = REQUIRED];
}

// A device that is not yet claimed by a user.
// This is a top-level resource that is not owned by any other resource.
// Once a device is claimed, it is removed as an UnclaimedDevice and created as
// a Device. The new Device is owned by the User that claimed it, and the
// `name` field is NOT guaranteed to be the same as the `name` field of the
// UnclaimedDevice.
message UnclaimedDevice {
  // The resource name of the unclaimed device.
  // Format: unclaimedDevices/{unclaimed_device}.
  string name = 1;

  // When the unclaimed device was created.
  google.protobuf.Timestamp create_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  string device_session_id = 3 [(google.api.field_behavior) = INPUT_ONLY];

  string setup_code = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// A device that is claimed by a user.
// This is a child resource of User.
message Device {
  // The resource name of the device.
  // Format: users/{user}/devices/{device}.
  string name = 1;

  // The display name of the device.
  string display_name = 2;

  // When the device was created. The device started as an unclaimed device
  // before being claimed by a user, and the create time here refers to the
  // time the device was first created as an unclaimed device.
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The inventory items available for purchase on the device.
  repeated InventoryItem inventory = 3;

  // The commands that the device supports that return no data.
  repeated string null_execution_commands = 4;

  // The commands that the device supports that return a boolean value.
  repeated string bool_execution_commands = 5;
}

message InventoryItem {
  // The display name of the inventory item.
  string display_name = 1;

  // The price of the inventory item in satoshis.
  int32 price_sats = 2;

  // The command to run on the device upon successful item payment.
  string vend_null_execution_command = 3;

  // The command to run to check whether the item slot still has available
  // inventory. If empty, it is up to the customer to see if there is inventory
  // available before purchasing the item. If this command returns true, that
  // means there is still inventory left, and false means the item is out of
  // inventory.
  string inventory_check_bool_execution_command = 4;
}

// A wallet containing Bitcoin that belongs to a LightningVend user but is
// custodied by LightningVend.
message Wallet {
  // The resource name of the wallet.
  // Format: users/{user}/wallets/{wallet}.
  string name = 1;

  int64 balance_sats = 2;

  StaticWalletWithdrawalDestination automatic_withdrawal_destination = 3;
}

message WalletDeposit {
  // The resource name of the wallet deposit.
  // Format: users/{user}/wallets/{wallet}/deposits/{deposit}.
  string name = 1;

  // The amount of the deposit. Note that this proto adheres to ISO 4217, which
  // does not officially include Bitcoin. Bitcoin can be represented in this
  // field by setting `Money.currency_code` to "XBT", where `Money.units`
  // represents whole coins and `Money.nanos` represents sats (this works out
  // nicely since one sat is 10^-9 Bitcoins, or one "nano-Bitcoin").
  google.type.Money amount = 2 [(google.api.field_behavior) = REQUIRED];

  // The LND invoice that the user should pay to deposit funds into their
  // wallet. The field is updated when the invoice is paid.
  lnrpc.Invoice invoice = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message WalletWithdrawal {
  // The resource name of the wallet withdrawal.
  // Format: users/{user}/wallets/{wallet}/withdrawals/{withdrawal}.
  string name = 1;

  oneof destination {
    StaticWalletWithdrawalDestination static_destination = 2;

    DynamicWalletWithdrawalDestination dynamic_destination = 3;
  }
}

// Represents an unchanging (and therefore reusable) Bitcoin withdrawal
// destination, such as an LNURL-Withdraw link or an on-chain address.
message StaticWalletWithdrawalDestination {
  // TODO  - Add fields.
}

// Represents a single-use Bitcoin withdrawal destination, such as a Bolt-11
// lightning invoice.
message DynamicWalletWithdrawalDestination {
  // TODO  - Add fields.
}
